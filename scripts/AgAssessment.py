# -*- coding: utf-8 -*-import stringimport arcpyimport datetimeimport shutilimport pathlibimport openpyxlimport reimport csvfrom arcpy import env# import log toolimport osimport sysmyScripts = os.path.join(os.path.dirname(__file__), "helpers")sys.path.append(myScripts)from printmessages import printMessages as logfrom sanitize import sanitize# TODO: Remove hardcoded layers and add layer template to SWCD Tools folder# TODO: Get name from os username instead of layoutclass Delineate(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "1. Delineate Parcels"        self.description = "Delienate parcels and create folder structure"        self.category = "Automated Ag Assessment"        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(            displayName="Tax ID Number",            name="tax_id_number",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True)        param1 = arcpy.Parameter(            displayName="Last Name",            name="last_name",            datatype="GPString",            parameterType="Required",            direction="Input")        param2 = arcpy.Parameter(            displayName="First Name",            name="first_name",            datatype="GPString",            parameterType="Required",            direction="Input")        param3 = arcpy.Parameter(            displayName="Mailing Street Name and Number",            name="street_name_num",            datatype="GPString",            parameterType="Required",            direction="Input")                param4 = arcpy.Parameter(            displayName="Mailing City/Town",            name="city_town",            datatype="GPString",            parameterType="Required",            direction="Input")        param5 = arcpy.Parameter(            displayName="Mailing State (two letter)",            name="state",            datatype="GPString",            parameterType="Required",            direction="Input")        param6 = arcpy.Parameter(            displayName="Mailing Zip Code",            name="zip_code",            datatype="GPString",            parameterType="Required",            direction="Input")        params = [param0, param1, param2, param3, param4, param5, param6]        return params    def execute(self, parameters, messages):        """The source code of the tool."""        # Setup        arcpy.env.overwriteOutput = True        parcel_layer = 'Parcels'        # Parameters        tax_id_nums = parameters[0].valueAsText.split(";")        last_name = parameters[1].valueAsText        first_name = parameters[2].valueAsText        street_name_num = parameters[3].valueAsText        city_town = parameters[4].valueAsText        state = parameters[5].valueAsText        zip_code = parameters[6].valueAsText        # Helpers        project = arcpy.mp.ArcGISProject("Current")        project_name = project.filePath.split("\\")[-1][:-5]        year = datetime.date.today().year        path_root = "O:\Ag Assessments\{}\{}".format(year, project_name)        # Make a folder for the client        pathlib.Path(path_root).mkdir(parents=True, exist_ok=True)        orig_map = project.listMaps("Map")[0]        orig_map.clearSelection()        orig_layout = project.listLayouts("Layout")[0]                for tax_id_num in tax_id_nums:            layer_name = "{}_{}".format(last_name, tax_id_num)            sanitized_name = sanitize(layer_name)            layer_path = "{}\\{}".format(arcpy.env.workspace, sanitized_name)            # create new map and make it active            new_map = project.copyItem(orig_map, tax_id_num)            new_map.openView()            cam = project.activeView.camera            # create a new layout            new_layout = project.copyItem(orig_layout, tax_id_num)            new_layout.openView()                        # set layout's map to new map created            mf = new_layout.listElements("MAPFRAME_ELEMENT")[0]            mf.map = new_map            mf.name = tax_id_num            # turn off Parcels layer            parcel_layer = new_map.listLayers("Parcels")[0]            parcel_layer.visible = False               # create sql expression to select correct parcel            sql_expr="PRINT_KEY = '{}'".format(tax_id_num)            # create parcel layer and add it to the map            feat = arcpy.management.MakeFeatureLayer(parcel_layer, layer_name, sql_expr)            arcpy.management.CopyFeatures(feat, layer_path)            lyr = new_map.addDataFromPath(layer_path)            lyr.name = layer_name            # update parcel symbology            sym = lyr.symbology            sym.renderer.symbol.applySymbolFromGallery("Black Outline (2 pts)")            lyr.symbology = sym            # Create soil group worksheets for each layout            sgw_path = r'{}\{}.xlsx'.format(path_root, new_layout.name)            sgw_path = pathlib.PureWindowsPath(sgw_path).as_posix()                        shutil.copyfile('O:\Ag Assessments\Soil Group Worksheet.xlsx', sgw_path)                        # set SWIS code in layout            swis_box = new_layout.listElements("TEXT_ELEMENT", "SWIS")[0]            swis_value = [row[0] for row in arcpy.da.SearchCursor(layer_path, "SWIS")][0]            swis_box.text = "SWIS: {}".format(swis_value)            # set name in layout            name_box = new_layout.listElements("TEXT_ELEMENT", "Name")[0]            name_box.text = "{}, {}".format(last_name, first_name)            # set municipality in layout            municipality_box = new_layout.listElements("TEXT_ELEMENT", "Municipality")[0]            municipality_value = [row[0] for row in arcpy.da.SearchCursor(layer_path, "TOWN")][0]            municipality_box.text = "{}".format(municipality_value)            # get property address info            location_value = [row[0] for row in arcpy.da.SearchCursor(layer_path, "LOCATION")][0]            agdist_value = [row[0] for row in arcpy.da.SearchCursor(layer_path, "AGDIST")][0]            if agdist_value in ["", None, " "]:                agdist_value = "__"            else:                agdist_value = "x"            # set SWIS, municipality, tax map identifier, etc in soil group worksheet            sgw_workbook = openpyxl.load_workbook(sgw_path)            ws = sgw_workbook['SGW']            ws['D24'] = swis_value            ws['D19'] = municipality_value            ws['D17'] = location_value            ws['B20'] = agdist_value            ws['D26'] = tax_id_num            ws['F13'] = first_name            ws['B13'] = last_name            ws['B15'] = street_name_num            ws['F15'] = city_town            ws['J15'] = state            ws['K15'] = zip_code            sgw_workbook.save(sgw_path)            # zoom to layer in map object            ext = arcpy.Describe(lyr).extent            cam.setExtent(ext)            # zoom layout to last active map            mf = new_layout.listElements("MAPFRAME_ELEMENT")[0]            mf.camera.setExtent(mf.getLayerExtent(lyr))            mf.camera.scale = mf.camera.scale * 1.1            # Need to close layouts for camera change to take effect            project.closeViews("LAYOUTS")                    layouts = project.listLayouts()        for layout in layouts:            if layout.name == "Layout":                continue            layout_file_path = "{}\{}.pdf".format(path_root, layout.name)            layout.exportToPDF(layout_file_path)        # cleanup        project.save()        # open folder to print out maps        os.startfile(path_root)        returnclass Agland(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "2a. Delineate Agland"        self.category = "Automated Ag Assessment"        self.description = "Select all agland for delineation"    def getParameterInfo(self):        """Define parameter definitions"""        params = []        return params        def execute(self, parameters, messages):        """The source code of the tool."""        # Setup        arcpy.env.overwriteOutput = True        # Helpers        project = arcpy.mp.ArcGISProject("Current")        project_name = project.filePath.split("\\")[-1][:-5]         maps = project.listMaps()        # Check if we're on a created map        map_name_format = re.compile('[0-9]+\.[0-9]+\-[0-9]\-[0-9]+\.[0-9]+')        layouts = []        for m in maps:            # Get Tax ID Number for map            tax_id_num = m.name            # look at next map if this one isn't a tax id number map            if map_name_format.match(tax_id_num) is None:                continue                        # get parcel layer or drop off of map            lyrs = m.listLayers("*_{}".format(tax_id_num))            if len(lyrs) == 0:                log("no appropriate parcel layer found")                continue            # get cursor shape            fc = lyrs[0]            #fc_print_key = [row[0] for row in arcpy.da.SearchCursor(fc, "PRINT_KEY")][0]            # check how many pieces are selected            sel_set = fc.getSelectionSet()            if sel_set == None:                continue            # construct layer names and paths            layer_name = "{}_Agland".format(fc.name)            sanitized_name = sanitize(layer_name)            layer_path = "{}\\{}".format(arcpy.env.workspace, sanitized_name)            # export shape to new feature class            feat = arcpy.management.MakeFeatureLayer(fc, layer_name)            log("layer_path: ", layer_path)            arcpy.management.CopyFeatures(feat, layer_path)            lyr = m.addDataFromPath(layer_path)            lyr.name = "Agland_{}".format(sanitize(tax_id_num.split("-")[-1]))            # update symbology            sym = lyr.symbology            sym.renderer.symbol.color = {'RGB' : [0, 0, 0, 0]}            sym.renderer.symbol.outlineColor = {'RGB' : [255, 0, 0, 100]}            sym.renderer.symbol.size = 3            lyr.symbology = sym                        # clear selection            m.clearSelection()        # Cleanup        project.save()        returnclass NonAg(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "2b. Delineate NonAg"        self.category = "Automated Ag Assessment"        self.description = "Select all non-agricultural land for delineation"    def getParameterInfo(self):        """Define parameter definitions"""        params = []        return params    def execute(self, parameters, messages):        """The source code of the tool."""        # Setup        arcpy.env.overwriteOutput = True        # Helpers        project = arcpy.mp.ArcGISProject("Current")        project_name = project.filePath.split("\\")[-1][:-5]         maps = project.listMaps()        # Check if we're on a created map        map_name_format = re.compile('[0-9]+\.[0-9]+\-[0-9]\-[0-9]+\.[0-9]+')        layouts = []        for m in maps:            # Get Tax ID Number for map            tax_id_num = m.name            # look at next map if this one isn't a tax id number map            if map_name_format.match(tax_id_num) is None:                continue                        # get parcel layer or drop off of map            lyrs = m.listLayers("*_{}".format(tax_id_num))            if len(lyrs) == 0:                log("no appropriate parcel layer found")                continue            # get cursor shape            fc = lyrs[0]            #fc_print_key = [row[0] for row in arcpy.da.SearchCursor(fc, "PRINT_KEY")][0]            # check how many pieces are selected            sel_set = fc.getSelectionSet()            if sel_set == None:                continue            # construct layer names and paths            layer_name = "{}_NonAg".format(fc.name)            sanitized_name = sanitize(layer_name)            layer_path = "{}\\{}".format(arcpy.env.workspace, sanitized_name)            # export shape to new feature class            feat = arcpy.management.MakeFeatureLayer(fc, layer_name)            log("layer_path: ", layer_path)            arcpy.management.CopyFeatures(feat, layer_path)            lyr = m.addDataFromPath(layer_path)            lyr.name = "NonAg_{}".format(sanitize(tax_id_num.split("-")[-1]))            # update symbology            sym = lyr.symbology            sym.renderer.symbol.color = {'RGB' : [0, 0, 0, 0]}            sym.renderer.symbol.outlineColor = {'RGB' : [0, 112, 255, 100]}            sym.renderer.symbol.size = 3            lyr.symbology = sym                        # clear selection            m.clearSelection()        # Cleanup        project.save()        returnclass Forest(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "2c. Delineate Forest"        self.category = "Automated Ag Assessment"        self.description = "Select all forest land for delineation"    def getParameterInfo(self):        """Define parameter definitions"""        params = []        return params    def execute(self, parameters, messages):        """The source code of the tool."""        # Setup        arcpy.env.overwriteOutput = True        # Helpers        project = arcpy.mp.ArcGISProject("Current")        project_name = project.filePath.split("\\")[-1][:-5]         maps = project.listMaps()        # Check if we're on a created map        map_name_format = re.compile('[0-9]+\.[0-9]+\-[0-9]\-[0-9]+\.[0-9]+')        layouts = []        for m in maps:            # Get Tax ID Number for map            tax_id_num = m.name            # look at next map if this one isn't a tax id number map            if map_name_format.match(tax_id_num) is None:                continue                        # get parcel layer or drop off of map            lyrs = m.listLayers("*_{}".format(tax_id_num))            if len(lyrs) == 0:                log("no appropriate parcel layer found")                continue            # get cursor shape            fc = lyrs[0]            #fc_print_key = [row[0] for row in arcpy.da.SearchCursor(fc, "PRINT_KEY")][0]            # check how many pieces are selected            sel_set = fc.getSelectionSet()            if sel_set == None:                continue            # construct layer names and paths            layer_name = "{}_Forest".format(fc.name)            sanitized_name = sanitize(layer_name)            layer_path = "{}\\{}".format(arcpy.env.workspace, sanitized_name)            # export shape to new feature class            feat = arcpy.management.MakeFeatureLayer(fc, layer_name)            log("layer_path: ", layer_path)            arcpy.management.CopyFeatures(feat, layer_path)            lyr = m.addDataFromPath(layer_path)            lyr.name = "Forest_{}".format(sanitize(tax_id_num.split("-")[-1]))            # update symbology            sym = lyr.symbology            sym.renderer.symbol.color = {'RGB' : [0, 0, 0, 0]}                              sym.renderer.symbol.outlineColor = {'RGB' : [85, 255, 0, 100]}            sym.renderer.symbol.size = 3            lyr.symbology = sym                        # clear selection            m.clearSelection()        # Cleanup        project.save()        returnclass Process(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "3. Process"        self.category = "Automated Ag Assessment"        self.description = "Run after splitting parcels into use areas"    def getParameterInfo(self):        """Define parameter definitions"""        return        def execute(self, parameters, messages):        """The source code of the tool."""        # Setup        arcpy.env.overwriteOutput = True        # Helpers        project = arcpy.mp.ArcGISProject("Current")        project_name = project.filePath.split("\\")[-1][:-5]        # Path Root        year = datetime.date.today().year        path_root = "O:\Ag Assessments\{}\{}".format(year, project_name)            maps = project.listMaps()        layouts = []        for m in maps:            # Clear selection            m.clearSelection()            # Get Tax ID Number for map            tax_id_num = m.name            # Check if we're on a created map            lyts = project.listLayouts(tax_id_num)            lyt = ""            if len(lyts) == 1:                lyt = lyts[0]                layouts.append(lyt)            else:                continue            # Helper variables            soils_layers = []            use_layers = []            tables = []            # Start work            lyrs = m.listLayers()            lyr_types = set()            for lyr in lyrs:                # Update symbology                lyr_type = ""                if "agland" in lyr.name.lower():                    use_layers.append(lyr)                    lyr_type = "Agland"                elif "nonag" in lyr.name.lower():                    use_layers.append(lyr)                    lyr_type = "NonAg"                elif "forest" in lyr.name.lower():                    use_layers.append(lyr)                    lyr_type = "Forest"                else:                    continue                lyr_types.add(lyr_type)                # Create clip layer                soil_layer = m.listLayers("Soils")[0]                new_layer_path = "{}\\{}".format(arcpy.env.workspace, "{}_{}_soils".format(sanitize(lyr.name), sanitize(tax_id_num)))                arcpy.analysis.Clip(soil_layer, lyr, new_layer_path)                # Dissolve duplicate MUSYMs                dissolve_layer_path = "{}\\{}".format(arcpy.env.workspace, "{}_{}_soils_dissolved".format(sanitize(lyr.name), sanitize(tax_id_num)))                arcpy.management.Dissolve(new_layer_path, dissolve_layer_path, "MUSYM")                # Add to map                new_layer = m.addDataFromPath(dissolve_layer_path)                               soils_layers.append(new_layer)                new_layer.name = "{}_soils".format(lyr.name)                # Add acreage field                field_alias = "{} Acres".format(lyr_type)                arcpy.management.AddField(new_layer, "Acres", "FLOAT", 2, 2, field_alias=field_alias)                # Calculate geometry                arcpy.management.CalculateGeometryAttributes(in_features=new_layer.name, geometry_property=[["Acres", "AREA_GEODESIC"]], area_unit="ACRES_US")                # Update soils clip layer symbology                    sym = new_layer.symbology                sym.renderer.symbol.color = {'RGB' : [0, 0, 0, 0]}                sym.renderer.symbol.outlineColor = {'RGB' : [255, 255, 0, 100]}                sym.renderer.symbol.size = 1.5                new_layer.symbology = sym                # Add label                new_layer.showLabels = True                label_class = new_layer.listLabelClasses()[0]                label_class.visible = True                label_class.expression = "$feature.MUSYM"                l_cim = new_layer.getDefinition('V3')                lc = l_cim.labelClasses[0]                      # Update text properties of label                lc.textSymbol.symbol.height = 12                lc.textSymbol.symbol.symbol.symbolLayers = [                    {                        "type": "CIMSolidFill",                        "enable": True,                        "color": {                            "type": "CIMRGBColor",                            "values": [255, 255, 0, 100]                        }                    }                ]                lc.standardLabelPlacementProperties.numLabelsOption = "OneLabelPerPart"                # Update CIM defintion                new_layer.setDefinition(l_cim)                # Get soils layer attribute table and export / extract needed fields for layout                table_path = "{}\\{}".format(arcpy.env.workspace, "{}_ExportTable".format(sanitize(new_layer.name)))                arcpy.conversion.ExportTable(new_layer.name, table_path)                arcpy.management.DeleteField(table_path, ["MUSYM", "Acres"], "KEEP_FIELDS")                # Add soils table export to the given map                soils_table = arcpy.mp.Table(table_path)                tables.append(soils_table)                addTab = m.addTable(soils_table)                soils_table_uri = soils_table.URI                # Get layout table                tbl = lyt.listElements("MAPSURROUND_ELEMENT", lyr_type)[0]                # Set layout table to exported attributes table                tbl_cim = tbl.getDefinition("V3")                tbl_cim.mapMemberURI = soils_table_uri                tbl.setDefinition(tbl_cim)                # Refresh layout                lyt_cim = lyt.getDefinition('V3')                lyt.setDefinition(lyt_cim)                project.save()                            project.closeViews("LAYOUTS")            # Reorder layers so soils layers are last            for soils_layer in soils_layers:                for use_layer in use_layers:                    m.moveLayer(use_layer, soils_layer, "AFTER")            # Remove unused tables            uses = {'Agland', 'Forest', 'NonAg'}            for i in uses:                if not i in lyr_types:                    tbl_remove = lyt.listElements("MAPSURROUND_ELEMENT", i)[0]                    lyt.deleteElement(tbl_remove)            # Display wanted legend items only            legend = lyt.listElements("LEGEND_ELEMENT")[0]            legend_items = legend.items            use_layer_names = [ i.name for i in use_layers ]            for item in legend_items:                if item.name in use_layer_names:                    item.visible = True                else:                    item.visible = False            # Export tables            soils_tables = []            for table in tables:                table_file_path = "{}\{}.csv".format(path_root, table.name)                soils_tables.append(table_file_path)                arcpy.conversion.ExportTable(table, table_file_path)            # Soil group worksheet            sgw_path = "{}\{}.xlsx".format(path_root, lyt.name)            # Populate soil group worksheet with values            sgw_path = pathlib.PureWindowsPath(sgw_path).as_posix()            sgw_workbook = openpyxl.load_workbook(sgw_path)            ws = sgw_workbook['SGW']            for tbl in soils_tables:                if "agland" in tbl.lower():                    with open(tbl, 'r') as csvfile:                        csvreader = csv.reader(csvfile)                        fields = next(csvreader)                        idx = 0                        for row in csvreader:                            if idx < 24:                                soil_cell = 'A{}'.format(34 + idx)                                area_cell = 'H{}'.format(34 + idx)                                ws[soil_cell] = row[0]                                ws[area_cell] = round(float(row[1]), 2)                            else:                                # overflow                                soil_cell = 'N{}'.format(9 + idx)                                area_cell = 'U{}'.format(9 + idx)                                ws[soil_cell] = row[0]                                ws[area_cell] = round(float(row[1]), 2)                                                            idx += 1                elif "nonag" in tbl.lower():                    tot = 0                    with open(tbl, 'r') as csvfile:                        csvreader = csv.reader(csvfile)                        fields = next(csvreader)                        for row in csvreader:                            tot += float(row[1])                    ws['K28'] = tot                elif "forest" in tbl.lower():                    tot = 0                    with open(tbl, 'r') as csvfile:                        csvreader = csv.reader(csvfile)                        fields = next(csvreader)                        for row in csvreader:                            tot += float(row[1])                    ws['L24'] = tot                            sgw_workbook.save(sgw_path)            sgw_workbook.close()        for layout in layouts:            layout.openView()        # Cleanup        project.save()        returnclass Export(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "4. Export Layouts"        self.description = "Run to export layouts"        self.category = "Automated Ag Assessment"        self.canRunInBackground = False       def getParameterInfo(self):        """Define parameter definitions"""        return    def execute(self, parameters, messages):        """The source code of the tool."""        # Setup        log=printMessages        arcpy.env.overwriteOutput = True        # Helpers        project = arcpy.mp.ArcGISProject("Current")        project_name = project.filePath.split("\\")[-1][:-5]        # Path Root        year = datetime.date.today().year        path_root = "O:\Ag Assessments\{}\{}".format(year, project_name)            # Export layouts        layouts = project.listLayouts()        for layout in layouts:            if layout.name == "Layout":                continue            layout_file_path = "{}\{}.pdf".format(path_root, layout.name)            layout.exportToPDF(layout_file_path)        # Open project folder        os.startfile(path_root)        return