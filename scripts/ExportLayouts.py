# -*- coding: utf-8 -*-import arcpy# import log toolimport osimport sysmyScripts = os.path.join(os.path.dirname(__file__), "helpers")sys.path.append(myScripts)from printmessages import printMessagesclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Export Layouts"        self.alias = "Export Layouts"        # List of tool classes associated with this toolbox        self.tools = [ExportLayouts]class ExportLayouts(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Export Layouts"        self.description = "Run to export layouts"        self.category = "Export Layouts"        self.canRunInBackground = False       def getParameterInfo(self):        """Define parameter definitions"""        project = arcpy.mp.ArcGISProject("Current")        layout_list = [l.name for l in project.listLayouts()]                param0 = arcpy.Parameter(            displayName="Layouts to Export",            name="layouts",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True            )        param0.filter.list = layout_list            param1 = arcpy.Parameter(            displayName="Output Folder",            name="output_folder",            datatype="DEType",            parameterType="Required",            direction="Input"            )                    params = [param0, param1]        return params    def execute(self, parameters, messages):        """The source code of the tool."""        # Setup        log=printMessages        arcpy.env.overwriteOutput = True        project = arcpy.mp.ArcGISProject("Current")                file_path = parameters[1].valueAsText        layouts = parameters[0].valueAsText.replace("'", "").split(";")        project_layouts = project.listLayouts()        log(layouts)        log(project_layouts)        # Export layouts        for layout in project_layouts:            if layout.name in layouts:                layout_file_path = "{}\{}.pdf".format(file_path, layout.name)                layout.exportToPDF(layout_file_path)        # Open project folder        os.startfile(file_path)        return    