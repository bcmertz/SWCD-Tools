# -*- coding: utf-8 -*-import arcpy# import log toolimport osimport sysmyScripts = os.path.join(os.path.dirname(__file__), "helpers")sys.path.append(myScripts)from printmessages import printMessagesclass Toolbox:    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Line Processing"        self.alias = "Line Processing"        # List of tool classes associated with this toolbox        self.tools = [LocalMinimums]# TODO: local maximum, absolute min and maxclass LocalMinimums:    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Local Minimums"        self.description = "Find local minimums along line for a given raster"        self.category = "Linear Analysis"        self.canRunInBackground = False    def getParameterInfo(self):        """Define the tool parameters."""        param0 = arcpy.Parameter(            displayName="Line",            name="line",            datatype="GPFeatureLayer",            parameterType="Required",            direction="Input")        param0.filter.list = ["Polyline"]        param0.controlCLSID = '{60061247-BCA8-473E-A7AF-A2026DDE1C2D}' # allows line creation        param1 = arcpy.Parameter(            displayName="DEM",            name="dem",            datatype="GPRasterLayer",            parameterType="Required",            direction="Input")        param2 = arcpy.Parameter(            displayName="Analysis Area",            name="analysis_area",            datatype="GPExtent",            parameterType="Optional",            direction="Input")                param2.controlCLSID = '{15F0D1C1-F783-49BC-8D16-619B8E92F668}'        # TODO: set search interval off of highest slope in analysis area?        #       the idea being that we don't want to miss significant local maxima that could get us above the threshold        #       so we search within an interval defined by the linear distance it takes to hit that threshold for the highest slope        #       ... try to think of downsides        param3 = arcpy.Parameter(            displayName="Search Interval (m)",            name="search_distance",            datatype="GPDouble",            parameterType="Required",            direction="Input")        param4 = arcpy.Parameter(            displayName="Minimum Elevation Difference Threshold (in)",            name="threshold",            datatype="GPDouble",            parameterType="Required",            direction="Input")        #param5 = arcpy.Parameter(        #    displayName="Include endpoints?",        #    name="endpoints",        #    datatype="GPBoolean",        #    parameterType="Optional",        #    direction="Input")        param5 = arcpy.Parameter(            displayName="Output Features",            name="out_features",            datatype="DEFeatureClass",            parameterType="Required",            direction="Output")        param5.parameterDependencies = [param0.name]        param5.schema.clone = True                params = [param0, param1, param2, param3, param4, param5]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        # default search interval        if parameters[3].value == None:            parameters[3].value = 1        # default threshold value        if parameters[4].value == None:            parameters[4].value = 2        return    def execute(self, parameters, messages):        """The source code of the tool."""        log=printMessages        arcpy.env.overwriteOutput = True        log("reading in parameters")        line = parameters[0].value        dem_raster = parameters[1].value        XMin = parameters[2].value.XMin if parameters[2].value else 0        YMin = parameters[2].value.YMin if parameters[2].value else 0        XMax = parameters[2].value.XMax if parameters[2].value else 0        YMax = parameters[2].value.YMax if parameters[2].value else 0        extent = arcpy.Extent(XMin, YMin, XMax, YMax)        if parameters[2].value:                extent.spatialReference = parameters[2].value.spatialReference        search_interval = parameters[3].value        threshold = parameters[4].value / (3.2808 * 12)        # endpoints_bool = parameters[5].value        output_file = parameters[5].valueAsText        # project setup        log("setting up project")        project = arcpy.mp.ArcGISProject("Current")        active_map = project.activeMap        spatial_reference_name = active_map.spatialReference.name        spatial_reference = arcpy.SpatialReference(spatial_reference_name)        # create scratch layers        log("creating scratch layers")        scratch_dem = arcpy.CreateScratchName("temp",                                               data_type="RasterDataset",                                               workspace=arcpy.env.scratchFolder)        scratch_line = arcpy.CreateScratchName("temp",                                               data_type="DEFeatureClass",                                               workspace=arcpy.env.scratchFolder)        # clip to analysis area        if parameters[2].value:            # clip line to analysis area            log("clipping line to analysis area")            arcpy.analysis.Clip(line, extent.polygon, scratch_line)        else:            scratch_line = line        # generate points along line        log("generate points along line")        arcpy.edit.Densify(scratch_line, "DISTANCE", search_interval)        # iterate through lines and points        log("finding local minimums")        with arcpy.da.SearchCursor(scratch_line, ["SHAPE@"]) as cursor:            # keep track of local minimums            local_minimums = []            for sub_line in cursor:                # helper variables to find local minimums                elev_prev = -9999                lowpoint = None                lowpoint_elev = -9999                prev_local_maximum_elev = -9999                # iterate through each vertex of the given stream polyline                num_vertices = len(sub_line[0][0])                for i in range(num_vertices):                    # get current vertex and elevation                    vertex = sub_line[0][0][i]                    coord = "{} {}".format(vertex.X, vertex.Y)                    elev_cur = arcpy.management.GetCellValue(dem_raster, coord)                    elev_cur = float(elev_cur.getOutput(0))                    # first point                    if i == 0:                        lowpoint = vertex                        lowpoint_elev = elev_cur                    if i == num_vertices - 1:                        if elev_cur < lowpoint_elev:                            lowpoint = vertex                            lowpoint_elev = elev_cur                        delta_1 = threshold if prev_local_maximum_elev == -9999 else prev_local_maximum_elev - lowpoint_elev                        if delta_1 >= threshold:                            local_minimums.append(arcpy.PointGeometry(lowpoint))                                                                        # downhill                    elif elev_prev > elev_cur:                        delta_1 = threshold if prev_local_maximum_elev == -9999 else prev_local_maximum_elev - lowpoint_elev                        delta_2 = elev_prev - lowpoint_elev                        # both pass                        if delta_1 >= threshold and delta_2 >= threshold:                            local_minimums.append(arcpy.PointGeometry(lowpoint))                            prev_local_maximum_elev = elev_prev                            lowpoint = vertex                            lowpoint_elev = elev_cur                        # 1st threshold passes                        elif delta_1 >= threshold and delta_2 < threshold:                            if prev_local_maximum_elev == -9999:                                if elev_cur < lowpoint_elev:                                    lowpoint = vertex                                    lowpoint_elev = elev_cur                                                            elif elev_cur < lowpoint_elev:                                lowpoint = vertex                                lowpoint_elev = elev_cur                            else:                                pass                        # 2nd passes                        elif delta_1 < threshold and delta_2 >= threshold:                            prev_local_maximum_elev = elev_prev                            lowpoint = vertex                            lowpoint_elev = elev_cur                                                    # neither passes                         else:                            if elev_cur < lowpoint_elev:                                lowpoint = vertex                                lowpoint_elev = elev_cur                    # uphill                    else:                        pass                                        # setup for next iteration                    elev_prev = elev_cur                    ##                    # downhill##                    if elev_prev > elev_cur:##                        # reached threshold for first minimum##                        if prev_local_maximum_elev == -9999 and elev_prev - lowpoint_elev >= threshold:##                            local_minimums.append(arcpy.PointGeometry(lowpoint))##                            prev_local_maximum_elev = elev_prev##                            lowpoint = vertex##                            lowpoint_elev = elev_cur##                        # failed first minimum, update lowpoint##                        elif prev_local_maximum_elev == -9999 and elev_prev - lowpoint_elev < threshold:##                            if elev_cur < lowpoint_elev:##                                if lowpoint_elev > elev_prev:##                                    prev_local_maximum_elev = lowpoint_elev##                                else:##                                    prev_local_maximum_elev = elev_prev##                                lowpoint = vertex##                                lowpoint_elev = elev_cur##                            # no action needed, continue ascending hopefully to reach a valid maximum##                            else:##                                pass##                        # reached threshold for subsequent minimum##                        elif prev_local_maximum_elev - lowpoint_elev >= threshold and elev_prev - lowpoint_elev >= threshold:##                            local_minimums.append(arcpy.PointGeometry(lowpoint))##                            prev_local_maximum_elev = elev_prev##                            lowpoint = vertex##                            lowpoint_elev = elev_cur##                        # failed threshold for subsequent minimum##                        elif elev_cur < lowpoint_elev:##                            if lowpoint_elev > elev_prev:##                                prev_local_maximum_elev = lowpoint_elev##                            else:##                                prev_local_maximum_elev = elev_prev##                            lowpoint = vertex##                            lowpoint_elev = elev_cur##                            ##                        # reached threshold for first minimum##                        if prev_local_maximum_elev == -9999 and elev_prev - lowpoint_elev >= threshold:##                            local_minimums.append(arcpy.PointGeometry(lowpoint))##                            prev_local_maximum_elev = elev_prev##                            lowpoint = vertex##                            lowpoint_elev = elev_cur##                        # failed first minimum, update lowpoint##                        elif prev_local_maximum_elev == -9999 and elev_prev - lowpoint_elev < threshold:##                            if elev_cur < lowpoint_elev:##                                if lowpoint_elev > elev_prev:##                                    prev_local_maximum_elev = lowpoint_elev##                                else:##                                    prev_local_maximum_elev = elev_prev##                                lowpoint = vertex##                                lowpoint_elev = elev_cur##                            # no action needed, continue ascending hopefully to reach a valid maximum##                            else:##                                pass##                        # reached threshold for subsequent minimum##                        elif prev_local_maximum_elev - lowpoint_elev >= threshold and elev_prev - lowpoint_elev >= threshold:##                            local_minimums.append(arcpy.PointGeometry(lowpoint))##                            prev_local_maximum_elev = elev_prev##                            lowpoint = vertex##                            lowpoint_elev = elev_cur##                        # failed threshold for subsequent minimum##                        elif elev_cur < lowpoint_elev:##                            if lowpoint_elev > elev_prev:##                                prev_local_maximum_elev = lowpoint_elev##                            else:##                                prev_local_maximum_elev = elev_prev##                            lowpoint = vertex##                            lowpoint_elev = elev_cur                        ##                    # uphill##                    # potential lowpoint or continuous upslope, will catch grade break if continuous upslope##                    # potential lowpoint doens't matter either since it was on a previous point we already would have registered on the last iteration##                    else:##                        pass            # add points to map            if len(local_minimums) > 0:                log("copying points to feature class")                arcpy.management.CopyFeatures(local_minimums, output_file)                log("defining spatial reference of feature")                arcpy.management.DefineProjection(output_file,spatial_reference)                log("adding minimums to map")                active_map.addDataFromPath(output_file)                            else:                log("no local minimums found")        # cleanup        log("deleting unneeded data")        arcpy.management.Delete([scratch_dem])        # save        log("saving project")        project.save()                    return######log(elev_cur, prev_local_maximum_elev, lowpoint_elev)##                    # first point or reset after lowpoint##                    if i == 0:##                        lowpoint = vertex##                        lowpoint_elev = elev_cur                          ##                    # descending##                    if elev_cur < elev_prev:##                        # second point descending##                        if prev_local_maximum_elev == -9999:##                            log("aqui")##                            prev_local_maximum_elev = elev_prev##                            lowpoint = vertex##                            lowpoint_elev = elev_cur##                        log("hhhh", elev_cur, prev_local_maximum_elev, lowpoint_elev)##                        # descending, lowpoint not yet found, second part verifies we didn't just pass a new higher hump to set our previous max to##                        if elev_cur <= lowpoint_elev and elev_prev <= prev_local_maximum_elev:##                            log("test")##                            lowpoint = vertex##                            lowpoint_elev = elev_cur                                ##                        # GRADE BREAK, end of ascent now descending##                        else:##                            delta_1 = prev_local_maximum_elev - lowpoint_elev##                            delta_2 = elev_prev - lowpoint_elev##                            log("here:",delta_1)##                            # stored local minimum is local relative to this grade break, ie - above threshold##                            if delta_1 >= threshold and delta_2 >= threshold:##                                log("adding 1", lowpoint_elev)##                                local_minimums.append(arcpy.PointGeometry(lowpoint))##                                lowpoint = vertex ##                                lowpoint_elev = elev_cur##                                prev_local_maximum_elev = elev_prev##                            # edge case - start has a small drop then a big climb should be included##                            #elif delta_1 < threshold and delta_2 >= threshold and len(local_minimums) == 0:##                            #    log("adding 1b", lowpoint_elev)##                            #    local_minimums.append(arcpy.PointGeometry(lowpoint))##                            #    lowpoint = vertex ##                            #    lowpoint_elev = elev_cur##                            #    prev_local_maximum_elev = elev_prev                                ##                            # last minimum fails initial threshold, move on to next attempt##                            elif delta_1 < threshold:##                                prev_local_maximum_elev = elev_prev##                                lowpoint = vertex ##                                lowpoint_elev = elev_cur##                        # last point##                        if i == num_vertices - 1:##                            if prev_local_maximum_elev - lowpoint_elev >= threshold:##                                lowpoint = vertex##                                lowpoint_elev = elev_cur ##                                log("adding 2", lowpoint_elev)##                                local_minimums.append(arcpy.PointGeometry(lowpoint))##                    # ascending, only matters if we're on an endpoint since we catch previous lowpoints at gradebreaks in descending##                    else:##                        # last point##                        if i == num_vertices - 1:##                            # only ascending, add first point regardelss of threshold##                            if prev_local_maximum_elev == -9999:##                                log("adding 3", lowpoint_elev)##                                local_minimums.append(arcpy.PointGeometry(lowpoint))##                            else:##                                if elev_cur - lowpoint_elev >= threshold and prev_local_maximum_elev - lowpoin_elev >= threshold:##                                    log("adding 4", lowpoint_elev)##                                    local_minimums.append(arcpy.PointGeometry(lowpoint))## OLDIE BUT GOODIE - pre figuring out slope based approach####        with arcpy.da.SearchCursor(scratch_line, ["SHAPE@"]) as cursor:##            # keep track of local minimums##            local_minimums = []####            # TODO: figure out multiline logic, right now only works for 1 line##            for sub_line in cursor:##                # TODO: make threshold work across flat wide dips, look at grade breaks and track potential low points##                ##                # iterate through each vertex of the given stream polyline##                num_vertices = len(sub_line[0][0])##                for i in range(num_vertices):##                    # get vertex##                    vertex = sub_line[0][0][i]##                    ##                    # get elevation at vertex##                    coord = "{} {}".format(vertex.X, vertex.Y)##                    elev_cur = arcpy.management.GetCellValue(dem_raster, coord)##                    elev_cur = float(elev_cur.getOutput(0))##                    if i == 0 and endpoints_bool:##                        vertex_after = sub_line[0][0][i+1]##                        coord = "{} {}".format(vertex_after.X, vertex_after.Y)##                        elev_after = arcpy.management.GetCellValue(dem_raster, coord)##                        elev_after = float(elev_after.getOutput(0))##                        if elev_after - elev_cur > threshold:##                            local_minimums.append(arcpy.PointGeometry(vertex))                                                          ##                    elif i>0:##                        vertex_before = sub_line[0][0][i-1]##                        coord = "{} {}".format(vertex_before.X, vertex_before.Y)##                        elev_before = arcpy.management.GetCellValue(dem_raster, coord)##                        elev_before = float(elev_before.getOutput(0))##                        if i < num_vertices - 1:##                            vertex_after = sub_line[0][0][i+1]##                            coord = "{} {}".format(vertex_after.X, vertex_after.Y)##                            elev_after = arcpy.management.GetCellValue(dem_raster, coord)##                            elev_after = float(elev_after.getOutput(0))##                            if elev_after - threshold > elev_cur and elev_before - threshold > elev_cur:##                                local_minimums.append(arcpy.PointGeometry(vertex))##                        elif endpoints_bool:##                            if elev_before - threshold > elev_cur:##                                local_minimums.append(arcpy.PointGeometry(vertex))